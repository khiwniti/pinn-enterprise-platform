version: '3.8'

services:
  # Reverse Proxy and Load Balancer
  nginx:
    image: nginx:alpine
    container_name: pinn-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./services/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./services/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api
      - ui
    networks:
      - pinn-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: pinn-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-pinn}
      POSTGRES_USER: ${POSTGRES_USER:-pinn}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./storage/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - pinn-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-pinn}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache and Message Queue
  redis:
    image: redis:7-alpine
    container_name: pinn-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-secure123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - pinn-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO Object Storage (S3-compatible)
  minio:
    image: minio/minio:latest
    container_name: pinn-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-secure123}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - pinn-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI Backend
  api:
    build:
      context: ./services/api
      dockerfile: Dockerfile
    container_name: pinn-api
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-pinn}:${POSTGRES_PASSWORD:-secure123}@postgres:5432/${POSTGRES_DB:-pinn}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-secure123}@redis:6379/0
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-secure123}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ENVIRONMENT=production
    volumes:
      - ./services/api:/app
      - model_cache:/app/cache
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - pinn-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Next.js Frontend
  ui:
    build:
      context: ./services/ui
      dockerfile: Dockerfile
    container_name: pinn-ui
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    volumes:
      - ./services/ui:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    depends_on:
      - api
    networks:
      - pinn-network
    restart: unless-stopped

  # Celery Worker (CPU)
  worker-cpu:
    build:
      context: ./services/workers
      dockerfile: Dockerfile.cpu
    container_name: pinn-worker-cpu
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-pinn}:${POSTGRES_PASSWORD:-secure123}@postgres:5432/${POSTGRES_DB:-pinn}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-secure123}@redis:6379/0
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-secure123}
      - WORKER_TYPE=cpu
    volumes:
      - ./services/workers:/app
      - model_cache:/app/cache
    depends_on:
      - postgres
      - redis
      - minio
    networks:
      - pinn-network
    restart: unless-stopped
    deploy:
      replicas: 2

  # Celery Worker (GPU) - Uncomment if you have GPU support
  # worker-gpu:
  #   build:
  #     context: ./services/workers
  #     dockerfile: Dockerfile.gpu
  #   container_name: pinn-worker-gpu
  #   environment:
  #     - DATABASE_URL=postgresql://${POSTGRES_USER:-pinn}:${POSTGRES_PASSWORD:-secure123}@postgres:5432/${POSTGRES_DB:-pinn}
  #     - REDIS_URL=redis://:${REDIS_PASSWORD:-secure123}@redis:6379/0
  #     - MINIO_ENDPOINT=minio:9000
  #     - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-minioadmin}
  #     - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-secure123}
  #     - WORKER_TYPE=gpu
  #   volumes:
  #     - ./services/workers:/app
  #     - model_cache:/app/cache
  #   depends_on:
  #     - postgres
  #     - redis
  #     - minio
  #   networks:
  #     - pinn-network
  #   restart: unless-stopped
  #   deploy:
  #     resources:
  #       reservations:
  #         devices:
  #           - driver: nvidia
  #             count: 1
  #             capabilities: [gpu]

  # Celery Beat Scheduler
  scheduler:
    build:
      context: ./services/workers
      dockerfile: Dockerfile.scheduler
    container_name: pinn-scheduler
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-pinn}:${POSTGRES_PASSWORD:-secure123}@postgres:5432/${POSTGRES_DB:-pinn}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-secure123}@redis:6379/0
    volumes:
      - ./services/workers:/app
    depends_on:
      - postgres
      - redis
    networks:
      - pinn-network
    restart: unless-stopped

  # Prometheus Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: pinn-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./services/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - pinn-network
    restart: unless-stopped

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: pinn-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./services/monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./services/monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - pinn-network
    restart: unless-stopped

  # Jaeger Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: pinn-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"
      - "14268:14268"
    networks:
      - pinn-network
    restart: unless-stopped

  # Elasticsearch for Logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: pinn-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - pinn-network
    restart: unless-stopped

  # Kibana for Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: pinn-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - pinn-network
    restart: unless-stopped

networks:
  pinn-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  minio_data:
  model_cache:
  prometheus_data:
  grafana_data:
  elasticsearch_data: